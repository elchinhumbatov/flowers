import React, { useState } from "react";
import s from "./Sort.module.css";
import TextField from "@material-ui/core/TextField";
import Autocomplete from "@material-ui/lab/Autocomplete";
import Button from '@material-ui/core/Button';
import DecreaseIcon from '@material-ui/icons/VerticalAlignBottom';
import IncreaseIcon from '@material-ui/icons/VerticalAlignTop';

const options = ["В тренде", "Новые", "Популярные", "По акции", "На скидке"];

function Sort({setProductWidth}) {
  const [viewColors, setViewColors] = useState("first");
  const [value, setValue] = useState(null);
  const [inputValue, setInputValue] = useState("");
  const [priceSort, setPriceSort] = useState(true);
  const toggleView = (view) => {
    setViewColors(view);
    view === 'first' ? setProductWidth('170px') : setProductWidth('250px');
  };

  return (
    <div className={s.wrapper} id='sort'>
      <div className={s.view}>
        <span>Вид: </span>
        <svg
          onClick={() => toggleView("first")}
          width="18"
          height="18"
          viewBox="0 0 18 18"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M0.25 1.5C0.25 1.16848 0.381696 0.850537 0.616116 0.616116C0.850537 0.381696 1.16848 0.25 1.5 0.25H4C4.33152 0.25 4.64946 0.381696 4.88388 0.616116C5.1183 0.850537 5.25 1.16848 5.25 1.5V4C5.25 4.33152 5.1183 4.64946 4.88388 4.88388C4.64946 5.1183 4.33152 5.25 4 5.25H1.5C1.16848 5.25 0.850537 5.1183 0.616116 4.88388C0.381696 4.64946 0.25 4.33152 0.25 4V1.5ZM6.5 1.5C6.5 1.16848 6.6317 0.850537 6.86612 0.616116C7.10054 0.381696 7.41848 0.25 7.75 0.25H10.25C10.5815 0.25 10.8995 0.381696 11.1339 0.616116C11.3683 0.850537 11.5 1.16848 11.5 1.5V4C11.5 4.33152 11.3683 4.64946 11.1339 4.88388C10.8995 5.1183 10.5815 5.25 10.25 5.25H7.75C7.41848 5.25 7.10054 5.1183 6.86612 4.88388C6.6317 4.64946 6.5 4.33152 6.5 4V1.5ZM12.75 1.5C12.75 1.16848 12.8817 0.850537 13.1161 0.616116C13.3505 0.381696 13.6685 0.25 14 0.25H16.5C16.8315 0.25 17.1495 0.381696 17.3839 0.616116C17.6183 0.850537 17.75 1.16848 17.75 1.5V4C17.75 4.33152 17.6183 4.64946 17.3839 4.88388C17.1495 5.1183 16.8315 5.25 16.5 5.25H14C13.6685 5.25 13.3505 5.1183 13.1161 4.88388C12.8817 4.64946 12.75 4.33152 12.75 4V1.5ZM0.25 7.75C0.25 7.41848 0.381696 7.10054 0.616116 6.86612C0.850537 6.6317 1.16848 6.5 1.5 6.5H4C4.33152 6.5 4.64946 6.6317 4.88388 6.86612C5.1183 7.10054 5.25 7.41848 5.25 7.75V10.25C5.25 10.5815 5.1183 10.8995 4.88388 11.1339C4.64946 11.3683 4.33152 11.5 4 11.5H1.5C1.16848 11.5 0.850537 11.3683 0.616116 11.1339C0.381696 10.8995 0.25 10.5815 0.25 10.25V7.75ZM6.5 7.75C6.5 7.41848 6.6317 7.10054 6.86612 6.86612C7.10054 6.6317 7.41848 6.5 7.75 6.5H10.25C10.5815 6.5 10.8995 6.6317 11.1339 6.86612C11.3683 7.10054 11.5 7.41848 11.5 7.75V10.25C11.5 10.5815 11.3683 10.8995 11.1339 11.1339C10.8995 11.3683 10.5815 11.5 10.25 11.5H7.75C7.41848 11.5 7.10054 11.3683 6.86612 11.1339C6.6317 10.8995 6.5 10.5815 6.5 10.25V7.75ZM12.75 7.75C12.75 7.41848 12.8817 7.10054 13.1161 6.86612C13.3505 6.6317 13.6685 6.5 14 6.5H16.5C16.8315 6.5 17.1495 6.6317 17.3839 6.86612C17.6183 7.10054 17.75 7.41848 17.75 7.75V10.25C17.75 10.5815 17.6183 10.8995 17.3839 11.1339C17.1495 11.3683 16.8315 11.5 16.5 11.5H14C13.6685 11.5 13.3505 11.3683 13.1161 11.1339C12.8817 10.8995 12.75 10.5815 12.75 10.25V7.75ZM0.25 14C0.25 13.6685 0.381696 13.3505 0.616116 13.1161C0.850537 12.8817 1.16848 12.75 1.5 12.75H4C4.33152 12.75 4.64946 12.8817 4.88388 13.1161C5.1183 13.3505 5.25 13.6685 5.25 14V16.5C5.25 16.8315 5.1183 17.1495 4.88388 17.3839C4.64946 17.6183 4.33152 17.75 4 17.75H1.5C1.16848 17.75 0.850537 17.6183 0.616116 17.3839C0.381696 17.1495 0.25 16.8315 0.25 16.5V14ZM6.5 14C6.5 13.6685 6.6317 13.3505 6.86612 13.1161C7.10054 12.8817 7.41848 12.75 7.75 12.75H10.25C10.5815 12.75 10.8995 12.8817 11.1339 13.1161C11.3683 13.3505 11.5 13.6685 11.5 14V16.5C11.5 16.8315 11.3683 17.1495 11.1339 17.3839C10.8995 17.6183 10.5815 17.75 10.25 17.75H7.75C7.41848 17.75 7.10054 17.6183 6.86612 17.3839C6.6317 17.1495 6.5 16.8315 6.5 16.5V14ZM12.75 14C12.75 13.6685 12.8817 13.3505 13.1161 13.1161C13.3505 12.8817 13.6685 12.75 14 12.75H16.5C16.8315 12.75 17.1495 12.8817 17.3839 13.1161C17.6183 13.3505 17.75 13.6685 17.75 14V16.5C17.75 16.8315 17.6183 17.1495 17.3839 17.3839C17.1495 17.6183 16.8315 17.75 16.5 17.75H14C13.6685 17.75 13.3505 17.6183 13.1161 17.3839C12.8817 17.1495 12.75 16.8315 12.75 16.5V14Z"
            fill={viewColors === "first" ? "#103742" : "#A9A9A9"}
          />
        </svg>
        <svg
          onClick={() => toggleView("second")}
          width="18"
          height="18"
          viewBox="0 0 18 18"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M0.25 2.125C0.25 1.62772 0.447544 1.15081 0.799175 0.799175C1.15081 0.447544 1.62772 0.25 2.125 0.25H5.875C6.37228 0.25 6.84919 0.447544 7.20083 0.799175C7.55246 1.15081 7.75 1.62772 7.75 2.125V5.875C7.75 6.37228 7.55246 6.84919 7.20083 7.20083C6.84919 7.55246 6.37228 7.75 5.875 7.75H2.125C1.62772 7.75 1.15081 7.55246 0.799175 7.20083C0.447544 6.84919 0.25 6.37228 0.25 5.875V2.125ZM10.25 2.125C10.25 1.62772 10.4475 1.15081 10.7992 0.799175C11.1508 0.447544 11.6277 0.25 12.125 0.25H15.875C16.3723 0.25 16.8492 0.447544 17.2008 0.799175C17.5525 1.15081 17.75 1.62772 17.75 2.125V5.875C17.75 6.37228 17.5525 6.84919 17.2008 7.20083C16.8492 7.55246 16.3723 7.75 15.875 7.75H12.125C11.6277 7.75 11.1508 7.55246 10.7992 7.20083C10.4475 6.84919 10.25 6.37228 10.25 5.875V2.125ZM0.25 12.125C0.25 11.6277 0.447544 11.1508 0.799175 10.7992C1.15081 10.4475 1.62772 10.25 2.125 10.25H5.875C6.37228 10.25 6.84919 10.4475 7.20083 10.7992C7.55246 11.1508 7.75 11.6277 7.75 12.125V15.875C7.75 16.3723 7.55246 16.8492 7.20083 17.2008C6.84919 17.5525 6.37228 17.75 5.875 17.75H2.125C1.62772 17.75 1.15081 17.5525 0.799175 17.2008C0.447544 16.8492 0.25 16.3723 0.25 15.875V12.125ZM10.25 12.125C10.25 11.6277 10.4475 11.1508 10.7992 10.7992C11.1508 10.4475 11.6277 10.25 12.125 10.25H15.875C16.3723 10.25 16.8492 10.4475 17.2008 10.7992C17.5525 11.1508 17.75 11.6277 17.75 12.125V15.875C17.75 16.3723 17.5525 16.8492 17.2008 17.2008C16.8492 17.5525 16.3723 17.75 15.875 17.75H12.125C11.6277 17.75 11.1508 17.5525 10.7992 17.2008C10.4475 16.8492 10.25 16.3723 10.25 15.875V12.125Z"
            fill={viewColors === "second" ? "#103742" : "#A9A9A9"}
          />
        </svg>
      </div>
      <div className={s.divider}></div>
      <div className={s.selector}>
        <Autocomplete
          value={value}
          onChange={(event, newValue) => {
            setValue(newValue);
          }}
          inputValue={inputValue}
          onInputChange={(event, newInputValue) => {
            setInputValue(newInputValue);
          }}
          id="controllable-states-demo"
          options={options}
          style={{ width: 200, background: '#fff'}}
          renderInput={(params) => (
            <TextField {...params} label="Сортировать по" variant="outlined" />
          )}
        />
      </div>
      <div className={s.divider}></div>
      <div className={s.priceSort}>
        <Button variant="outlined" style={{background: '#fff'}} onClick={()=>setPriceSort(!priceSort)}>
          Цена 
          {priceSort ? <IncreaseIcon /> : <DecreaseIcon />}
        </Button>
      </div>
    </div>
  );
}

export default Sort;
